import os
import base64
import requests
import pandas as pd

judge_prompt = """
You are an unbiased and meticulous evaluator. Your role is to assess the quality of a response generated by a fine-tuned language model based on the given input image, compared to the actual expected output. Use the following criteria for evaluation:

1. **Accuracy:** How accurately does the generated output reflect the actual expected output?
3. **Completeness:** Does the generated output address all necessary details present in the expected output?
4. **Clarity:** Is the generated output coherent, well-structured, and easy to understand?

**Instructions:**
1. Review the image description provided.
2. Compare the generated output with the actual expected output.
3. Evaluate each criterion on a scale from 1 to 10 (1 = poor, 10 = excellent).
4. Provide a summary of your evaluation, highlighting strengths and areas for improvement.

### Input Details:
- **Image Description:** [Insert description or key details about the image here]
- **Generated Output:** {predicted_result}
- **Expected Output:** {actual_result}

### Evaluation:
- **Relevance:** [Score and justification]
- **Accuracy:** [Score and justification]
- **Completeness:** [Score and justification]
- **Clarity:** [Score and justification]

### Final Assessment:
Provide a brief summary (2-3 sentences) of the overall quality of the generated output and whether it meets expectations.
"""

def encode_image(image_url):
    with open(image_url, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
    return encoded_image

def evaluate(image_url: str, actual_result: str, predicted_result: str , prompt: str):
    endpoint = os.getenv('AZURE_OPENAI_ENDPOINT')
    headers = {
        'Content-Type': 'application/json',
        'api_key': os.getenv('AZURE_OPENAI_API_KEY'),
    }
    variables ={
        'actual_result': actual_result,
        'predicted_result': predicted_result
    }
    prompt = prompt.format(variables=variables)
    base64_image = encode_image(image_url)

    messages = [
        {
            'role': 'system',
            'content': """ You are a helpful assistant tasked with judging the predicted xml output of a finetuned model again an actual xml."""
        },
        {
            'role': 'system',
            'content': [
                {
                    'type': 'text',
                    'text': prompt
                },
                {
                    'type': 'image_url',
                    'image_url': {'url': f'data:image/png;base64, {base64_image}'}
                }
            ]
        }
    ]

    payload =  {
        "temperature": 0,
        "max_tokens": 4096,
        "seed": 162,
        "messages": messages
    }

    try:
        response = requests.post(endpoint, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")

if __name__ == '__main__':
    df = pd.read_csv("") #ensure it has columns: image_path, predicted_result, actual_result
    for row in df.iterrows():
        result = evaluate(
            row['image_path'],
            row['actual_result'],
            row['predicted_result'],
            prompt =judge_prompt
        )
        print(result)
        #do something else with the result


    